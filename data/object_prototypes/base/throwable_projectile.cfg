{
id: "throwable_projectile",
prototype: ["throwable","hittable","standard_values"],
tags: "swallowable",
mass: 5,
friction: 1000,
traction: 1000,
solid_area: [1,0,14,15],
zorder: -1,

#
#
# a general prototype for ammunition that lies around on the ground/in-trees/etc, and can be swallowed and spat by the player.  NOT meant for general enemies, just meant for otherwise inert projectiles that can be spat.  Expected to have a limited amount of custom behavior overrides, especially for stuff like how the thunder-melons explode on contact.
#
#
# to make projectiles hangable in a tree, the only necessary change is to make their normal animation have an accel_y of zero.
object_level_collisions: true,
solid_dimensions: [],

#10
properties: {
	team: "if(is_player_ammo,'player',if(velocity_x != 0 or velocity_y != 0, if(vars.time_spat, 'player','evil'), 'evil_harmless'))",

	#attack_damage="if(animation in ['thrown'], 5, 0)"
	attack_damage: "standard_thrown_damage",
	handle_knockback: "def(collide_with) execute(me,[add(velocity_x, collide_with.facing * collide_with.attack_knockback),add(velocity_y, collide_with.facing * collide_with.attack_knockback), if('on_back' in me.available_animations,[animation('on_back'),fire_event('spat')])])",
},
vars: {
	time_spat: 0,
},
tmp: {
	on_back_count: 0,
	cycle_thrown_anim: 0,
},

#if we're re-running the thrown animation.
consts: {
	on_back_duration: 200,
	springiness: 0,

	#190
	spring_amount: 0,

	#1200
	bounce_roundness: 0,
},
on_die: "death_burst(self)",

#
#
# gets set by frogatto immediately after the creature is launched
on_spat: "[set(rotate, 0),set(vars.time_spat,level.cycle), set(brightness, 255), set(tmp.on_back_count, 0)]",

#
#
# handle ending the on_back timeout
on_return_to_normal: "die()",
on_end_anim: "if(tmp.on_back_count > consts.on_back_duration, fire_event('return_to_normal'), if(animation != 'normal' and is_standing and 'on_back' in available_animations, animation('on_back'), animation(animation)))",

#
#
# handle on_back twitching:
on_process_on_back: "[add(tmp.on_back_count,1),if(tmp.on_back_count > (consts.on_back_duration*3)/4, set(brightness, if(cycle%6 > 2, 256, 512)))]",

#
#
# disable body collisions
on_collide_object_body: "",

#
#
# handle collisions during thrown animations:
on_collide_head: "[set(velocity_y, -velocity_y/2), if(abs(velocity_y) >1000, impact_cloud(midpoint_x,y,'large'), if(abs(velocity_y) >30, impact_cloud(midpoint_x,y,'small')))]",
on_collide_side: "[set(velocity_x, -velocity_x/2), if(abs(velocity_x) >1000, impact_cloud(midpoint_x,y2,'large'), if(abs(velocity_x) >30, impact_cloud(midpoint_x,y2,'small')))]",
on_collide_feet: "[set(rotate, slope_standing_on), if(abs(velocity_y) >1000, impact_cloud(midpoint_x,y2,'large'), if(abs(velocity_y) >100, impact_cloud(midpoint_x,y2,'small'))),
		if(collide_with and collide_with.get_hit_by and collide_with.team != team, [collide_with.get_hit_by(me), die()]),
	           if(animation = 'thrown' and velocity_y + abs(velocity_x) > 600,
	                    [set(velocity_y, -(velocity_y*3)/5 - (velocity_x*slope_standing_on)/90), set(velocity_x, (velocity_x*4)/5 + (velocity_y*slope_standing_on)/90)], if((animation = 'thrown'), [set(tmp.on_back_count, 0), if('on_back' in available_animations, animation('on_back'))]))]",
on_bounced_on: "if(animation = 'on_back', die())",
on_surface_damage: "die()",
on_enter_water: "die()",

#
#
# handle error conditions:
on_stuck: "die()",
on_change_solid_dimensions_fail: "die()",
on_change_animation_failure: "die()",
on_add_object_fail: "die()",
}
