
#
#
# building off of 'throwable', this prototype makes an enemy which can be thrown like an ant, and has the same 'recovery from being thrown' where it sits and twitches on the ground briefly before hopping upwards again.
#
#
# to conform to this prototype, an object needs to:
#
#
# - specify a thrown animation with a thrown-area that covers the whole of the object, and with no body area.
#
#
# - specify an on_back animation with regular body area
#
#
# - an animation specified in 'consts' which it will revert to after recovering
{
id: "throwable_small_enemy",
prototype: ["throwable","hittable","standard_values"],
tags: "swallowable",
mass: 5,
friction: 1000,
traction: 1000,
solid_area: [5,10,20,25],
solid_dimensions: ["enemy","common"],
properties: {

	#team="if(animation in ['thrown'] and abs(cycle - vars.time_spat) < 100, 'player', 'evil')"
	team: "if(velocity_x != 0 or velocity_y != 0, if(vars.time_spat, 'player','evil'), 'evil_harmless')",
	hurt_velocity_y: -400,
	hurt_velocity_x: 200,
	attack_damage: "if(animation in ['thrown'], standard_thrown_damage, 1)",
	handle_damage_type: "def(collide_with)
						if(collide_with.damage_type = 'stun', if(consts.thrown_type, [add(velocity_y,hurt_velocity_y), set(type, consts.thrown_type), animation('on_back')] ))",
	team_condition: "((collide_with_area = 'body' and team != 'evil_harmless' and collide_with.team != team) and
		(not (team = 'evil' and collide_with.team = 'evil_harmless')))",
},
vars: {
	team: "evil",
	damage: 1,
	time_spat: 0,
},
tmp: {
	on_back_count: 0,
	cycle_thrown_anim: 0,
},

#if we're re-running the thrown animation.
consts: {
	on_back_duration: 200,
	solid_dimensions: ["enemy","common"],
	basic_animation: "stand",
	basic_type: "null",
	springiness: 190,
	spring_amount: 1200,
	bounce_roundness: 10,
},

#
#
# gets set by frogatto immediately after the creature is launched
on_spat: "[set(rotate, 0),set(vars.time_spat,level.cycle), set(tmp.on_back_count, 0)]",

#
#
# handle turning back to a regular object
on_return_to_normal: "[set(tmp.on_back_count, 0),fire_event('enter_on_back_anim'),fire_event('leave_on_back_anim'),set(type,consts.basic_type),animation(consts.basic_animation), set(rotate,0), set(vars.time_spat,0)]",
on_die: "[set(hitpoints,1),set(type,consts.basic_type),die()]",

#
#
# handle on_back twitching:
on_process_on_back: "[add(tmp.on_back_count,1),if(tmp.on_back_count > (consts.on_back_duration*3)/4, set(brightness, if(cycle%6 > 2, 256, 512)))]",
on_leave_on_back_anim: "[set(brightness, 256),set(velocity_y, velocity_y-600)]",
on_enter_on_back_anim: "[set(solid_dimensions_in, consts.solid_dimensions)]",

#
#
# handle collisions during thrown animations:
on_collide_head: "[set(velocity_y, -velocity_y/2), if(abs(velocity_y) >1000, impact_cloud(midpoint_x,y,'large'), if(abs(velocity_y) >30, impact_cloud(midpoint_x,y,'small')))]",

on_collide_side: "[set(velocity_x, -velocity_x/2), if(abs(velocity_x) >1000, impact_cloud(midpoint_x,y2,'large'), if(abs(velocity_x) >30, impact_cloud(midpoint_x,y2,'small')))]",
on_collide_feet: "[	set(rotate, slope_standing_on),
						if(abs(velocity_y) >1000,
							impact_cloud(midpoint_x,y2,'large'),
							if(abs(velocity_y) >100,
								impact_cloud(midpoint_x,y2,'small'))),
						
						if(animation = 'thrown',
							if(velocity_y + abs(velocity_x) > 600,
								[set(velocity_y, -(velocity_y*3)/5 - (velocity_x*slope_standing_on)/90), set(velocity_x, (velocity_x*4)/5 + (velocity_y*slope_standing_on)/90)],
								[set(tmp.on_back_count, 0), if('on_back' in available_animations, animation('on_back'))])),
						if(collide_with and collide_with.get_hit_by and team_condition, [collide_with.get_hit_by(me), die()])]",
on_bounced_on: "if(animation = 'on_back', die())",
on_end_anim: "if(tmp.on_back_count > consts.on_back_duration, fire_event('return_to_normal'), if(is_standing and 'on_back' in available_animations, animation('on_back'), animation(animation)))",
on_surface_damage: "die()",
on_enter_water: "[set(type,consts.basic_type), animation(consts.basic_animation), fire_event('enter_water')]",

#
#
# handle error conditions:
#on_change_solid_dimensions_fail="if(tmp.in_change_dimensions_fail or (not collide_with), die(),
#          [set(tmp.in_change_dimensions_fail, 1),
#		   fire_event(collide_with, 'blocking_thrown_object'),
#		   set(solid_dimensions_in, consts.solid_dimensions),
#		   set(tmp.in_change_dimensions_fail, 0)
#		  ])"
on_stuck: "if(not solid(level, midpoint_x, y+self.img_h-10), add(velocity_y, -1200), add(velocity_x, 1d600-300))",

#
#
# experimental change:  instead of dying if they collide with frogatto/others right away, give them a brief chance to get kicked out of the way.  The former concerns associated with instadying are still dealt with because if the player does entrap them and deliberately cause this, they still cause damage.
on_change_solid_dimensions_fail: "if(tmp.in_change_dimensions_fail > 15 or (not collide_with), die(),
	          [add(tmp.in_change_dimensions_fail, 1),
			   add(velocity_x,if(collide_with.midpoint_x > midpoint_x, -500,500))
			  ])",
on_change_animation_failure: "[die()]",
on_add_object_fail: "[if(collide_with.team != team and collide_with.get_hit_by, collide_with.get_hit_by(me)), die()]",
animation: [
	{
		accel_x: 0,
		accel_y: 80,
		pad: 3,
		id: "thrown",
		thrown_area: "all",
		duration: 60,
		frames: 1,
		body_area: ["solid","all"],
	},
	{
		accel_x: 0,
		accel_y: 80,
		pad: 3,
		id: "on_back",
		frames: 2,
		duration: 5,
		body_area: ["solid","all"],
	},
],
}
