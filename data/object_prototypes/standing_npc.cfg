{
/*Implementor requires "stand" animation.
Properties:	stand - The character starts standing in one place.
*/
id: "standing_npc",
prototype: ["interactive"],

editor_info: {
	category: "NPCs",
	var: [{
		name: "turning_behaviour",
		type: "enum",
		value: "'face_player'",
		enum_values: ["face_player","random","never"],
	},{
		name: "default_speech_text",
		value: "",
		type: "text",
	},{
		name: "start_mode",
		type: "enum",
		value: "'stand'",
		enum_values: ["stand"],
	},],
},

properties: {
	"stand": "def() animation('stand')",
	"pause": "def() [animation('stand'), set(vars.paused,1)]",
	"resume": "def() [fire_event('resume'), set(vars.paused,0)]",
	},
vars: {
	paused: 0,
	},

consts: {"can_stand": true},

on_create: "if(start_mode, animation(start_mode), stand())",

on_end_stand_anim: "[
	[	//Legacy, to ease the transition from the turn_to_face_player variable to the turning_behaviour variable.
		if(turn_to_face_player,
			set(facing, if(level.player.x < x, -1, 1))), 
		animation('stand'),
	], 
	[	//New code. Delete the above when all instances of turn_to_face_player have been removed from the game.
		animation('stand'),
		switch(turning_behaviour,
			'face_player', set(facing, if(level.player.x < x, -1, 1)),
			'random', if(not 1d2-1, set(facing, 1d2-1)),
			/*'never',*/ null, //Uncomment this when all NPCs actually have turning_behaviour set. It should enforce the turning behaviour variable by crashing if it's not set, or set incorrectly. I believe this behaviour to be the most correct, since when errors occur it'll fail fast.
		)
	]
	]",
	

on_interact: "[
	set(level.zoom, 2), 
	pause(),
	set(level.player.control_lock, ['ctrl_left']), 
	
	set(level.player.tmp.running, 0), 
	schedule(20, 
		fire_event('have_distance')),
	]",

on_have_distance: "[
	set(level.player.control_lock, ['ctrl_right']), 
	schedule(2, 
		fire_event('start_talking')),
	]",

on_start_talking: "[
	set(level.player.control_lock, null), 
	fire_event('talk'), 
	set(level.zoom, 1),
	resume(),
	]",

on_talk: "if(default_speech_text, speech_dialog(self, [default_speech_text]))",
}
