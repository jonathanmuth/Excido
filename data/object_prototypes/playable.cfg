{
id: "playable",
solid_dimensions: ["player","common","boss"],
vehicle: false,
is_human: true,
prototype: ["hittable"],
properties: {
	hurt_velocity_y: -800,
	hurt_velocity_x: 0,

	#previously -1000
	scripted_move_to_x: "def(target_x, target_facing, callback)
		                    [
		                    set(me.tmp.scripted_target_x, target_x),
							set(me.tmp.scripted_target_facing, target_facing),
							set(me.tmp.scripted_move_callback, callback),
							fire_event(me, 'handle_move_script')
							]",
	handle_damage: "def(collide_with) execute(me,[
						add(me.hitpoints, - if(me = level.player and collide_with.attack_damage_to_player, collide_with.attack_damage_to_player, collide_with.attack_damage)),
						player_damage_screen_flash(collide_with.attack_damage),
						set(solid_dimensions_in, ['player']),
						player_specific_damage_response()
					])",
	player_damage_screen_flash: "def(dmg_amt)
							if(dmg_amt > 2 or dmg_amt >= hitpoints, screen_flash([255, 0, 0,255], 4), if(dmg_amt = 2, screen_flash([255, 0, 0,200], 3), screen_flash([255, 0, 0,70], 2)))",
	player_specific_damage_response: "def() null",
	
	help: "q{\nDebug Console Help:\nThis is the debug console. Commands, which are written in FFL, are run on the\nselected object. For example, you just ran the help command on our hero. Some\nother commands you could try might be 'set(velocity_y, -5000)', or 'add(hp,5)'.To change the target of your actions in the console, click on the desired\nobject. There is a lot more you can do with FFL, so have a look at the\ndocumentation on our wiki, https://github.com/frogatto/frogatto/wiki/. If you\nget stuck, www.frogatto.com has a friendly forum where you can seek advice.\nPress ctrl-d to close the console.\n}",
	
	team: "'player'",
	
	store_event_add: "def(event_name, addend) if(not (event_name in [null, '']), set(level.player.stored_events, map_merge(level.player.vars.stored_events, {(event_name) -> addend})), [debug('error, wrote bad stored_event value')])",
	
	store_event: "def(event_name, value) if(not (event_name in [null, '']),
	add(level.player.vars.stored_events, {(event_name) -> value}), [debug('error, wrote bad stored_event value')])",
	
	mana: {
		get: "vars.mana",
		set: "[set(vars.mana, newValue), if(newValue = 0, set(vars.mana_shock_cycle, cycle))] where newValue = median(value, 0, vars.max_mana)"
	},
	mana_shock_active: "cycle - vars.mana_shock_cycle < mana_shock_duration",
	mana_shock_duration: 150,
	mana_shock_guard: "def(thingToDo) if(not mana_shock_active, thingToDo)",

	//stored_events: {
	//	get: "vars.stored_events",
	//	set: "if(value in [null, ''], [debug('error, wrote bad value'),debug_console()], set(vars.stored_events, value))",
	//}

	//Requires tmp.logged_events to be initialized to {}.
	log_string: "def(event) [set(tmp.logged_events, new_events), debug(new_events)] where new_events = map_merge(tmp.logged_events, {(event):1})",
	is_demo_version: "false",
},
vars: {
	achievement_kill_chain: [[null,-1000],[null,-2000],[null,-3000],[null,-4000],[null,-4000],[null,-5000],[null,-6000],[null,-7000],[null,-8000],[null,-9000],[null,-10000],[null,-11000],[null,-12000],[null,-13000],[null,-14000],[null,-15000]],
	levels_visited: [],
	stored_events: {},
	mana: 5000,
	max_mana: 5000,
	mana_shock_cycle: -150,
},


#
#
# damage handling:
on_surface_damage: "[fire_event('collide_damage')]",
on_collide_damage: "[if((not is_invincible), [add(hitpoints, -max(1, surface_damage)), cause_flinch(collide_with), display_hurt_visuals(), set(vars.time_last_hit, cycle), set(solid_dimensions_in, ['player'])])]",
on_process_jump: "if(ctrl_jump, [add(velocity_y, -vars.jump_boost)])",

#when falling, if we are standing for two consecutive frames, change
#us to a standing animation.
on_process_fall: "if(is_standing, if(tmp.last_standing_cycle = cycle-1, animation('stand'), set(tmp.last_standing_cycle, cycle)))",

#check if we end up on a slope in which case we re-calculate our standing.
on_enter_stand_anim: "if(abs(slope_standing_on) > 20, stand(self))",
on_enter_stand_up_slope_anim: "if(slope_standing_on*facing > -20, stand(self))",
on_enter_stand_down_slope_anim: "if(slope_standing_on*facing < 20, stand(self))",
functions: "#Function to do a water-equivalent of standing.#
	  def float(object_type obj)
		animation('swim_side_idle')",
}
